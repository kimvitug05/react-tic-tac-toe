{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","onClickCallback","id","value","Board","squareList","squares","concat","map","square","generateSquareComponents","PLAYER_1","generateSquares","currentId","row","push","col","App","useState","setSquares","currentPlayer","setCurrentPlayer","winner","setWinner","updatedSquares","checkForWinner","squaresArray","strikes","i","length","a","b","c","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fce08346.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Square.css'\n\nconst Square = (props) => {\n  // For Wave 1 enable this \n  //  Component to alert a parent \n  //  component when it's clicked on.\n\n  return <button\n    className=\"square\"\n    onClick={ () => { props.onClickCallback(props.id) } }\n  >\n    {props.value}\n  </button>\n}\n\nSquare.propTypes = {\n  value: PropTypes.string.isRequired,\n  onClickCallback: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default Square\n","import React from 'react';\nimport './Board.css';\nimport Square from './Square';\nimport PropTypes from 'prop-types';\n\n\nconst generateSquareComponents = (squares, onClickCallback) => {\n  // Complete this for Wave 1\n  // squares is a 2D Array, but \n  //  you need to return a 1D array\n  //  of square components\n\n  const squaresArray = [].concat(...squares);\n\n  return squaresArray.map(square => {\n    return (\n      <Square key={ square.id } id={ square.id } value={ square.value } onClickCallback={ onClickCallback } />\n    )\n  });\n\n}\n\nconst Board = ({ squares, onClickCallback }) => {\n  const squareList = generateSquareComponents(squares, onClickCallback);\n  // console.log(squareList);\n  return <div className=\"grid\" >\n    {squareList}\n  </div>\n}\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        value: PropTypes.string.isRequired\n      })\n    )\n  ),\n  onClickCallback: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport Board from './components/Board';\n\nconst PLAYER_1 = 'x';\nconst PLAYER_2 = 'o';\n\nconst generateSquares = () => {\n  const squares = [];\n\n  let currentId = 0;\n\n  for (let row = 0; row < 3; row += 1) {\n    squares.push([]);\n    for (let col = 0; col < 3; col += 1) {\n      squares[row].push({\n        id: currentId,\n        value: '',\n      });\n      currentId += 1;\n    }\n  }\n  // console.log(squares);\n  return squares;\n}\n\nconst App = () => {\n\n  // This starts state off as a 2D array of JS objects with\n  // empty value and unique ids.\n  const [squares, setSquares] = useState(generateSquares());\n  const [currentPlayer, setCurrentPlayer] = useState(PLAYER_1);\n  const [winner, setWinner] = useState(null);\n\n  // Wave 2\n  // You will need to create a method to change the square \n  //   When it is clicked on.\n  //   Then pass it into the squares as a callback\n  const onClickCallback = (id) => {\n    const updatedSquares = [ [...squares[0]], [...squares[1]], [...squares[2]] ];\n\n    for (let row = 0; row < 3; row += 1) {\n      for (let col = 0; col < 3; col += 1) {\n        if (updatedSquares[row][col].id === id && updatedSquares[row][col].value === '' && !winner) {\n          updatedSquares[row][col] = { ...updatedSquares[row][col], value: currentPlayer };\n        } \n      }\n    }\n\n    checkForWinner(updatedSquares);\n    setCurrentPlayer(currentPlayer === PLAYER_1 ? PLAYER_2 : PLAYER_1);\n    setSquares(updatedSquares);\n  }\n\n\n  const checkForWinner = (squares) => {\n    const squaresArray = [].concat(...squares);\n    // Complete in Wave 3\n    // You will need to:\n    // 1. Go accross each row to see if \n    //    3 squares in the same row match\n    //    i.e. same value\n    // 2. Go down each column to see if\n    //    3 squares in each column match\n    // 3. Go across each diagonal to see if \n    //    all three squares have the same value.\n    const strikes = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < strikes.length; i++) {\n      const [a, b, c] = strikes[i];\n      if (squaresArray[a].value && squaresArray[a].value === squaresArray[b].value && squaresArray[a].value === squaresArray[c].value) {\n        setWinner(squaresArray[a].value);\n        return true;\n      }    \n    }\n    return false;\n  }\n\n  const resetGame = () => {\n    setCurrentPlayer(PLAYER_1);\n    setSquares(generateSquares());\n    setWinner(null);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Tic Tac Toe</h1>\n        <h2>{ winner ? `Winner is ${winner}` : `Current Player ${currentPlayer}` }</h2>\n        <button onClick={ resetGame }>Reset Game</button>\n      </header>\n      <main>\n        <Board squares={squares} onClickCallback={ () => onClickCallback } />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}